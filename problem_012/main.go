/* *
 * Highly Divisible Triangular Number
 * ----------------------
 * The sequence of triangle numbers is generated by adding the natural numbers.
 * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
 * The first ten terms would be:
 * 							1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 *
 *	Let us list the factors of the first seven triangle numbers:
 *										 1: 1
 *										 3: 1,3
 *										 6: 1,2,3,6
 *										10: 1,2,5,10
 *										15: 1,3,5,15
 *										21: 1,3,7,21
 *										28: 1,2,4,7,14,28

 *	We can see that 28 is the first triangle number to have over five divisors.
 *	What is the value of the first triangle number to have over five hundred divisors?
 * ------------------------------------------------------------------
 */

package main

import (
	"fmt"
	"math"
	"reflect"
	"slices"
)

func count_divisors(n uint64) ( []uint64, int ) {
	n_sqrt := uint64(math.Sqrt(float64(n)))
	result := []uint64 {1, n};
	for i:= uint64(2); i <= n_sqrt; i++ {
		if n % i == 0 {
			result = append(result, uint64(i))
			result = append(result, uint64(n/i))
		}
	}
	slices.Sort(result)
	return result, len(result)
}

func main() {
	expected_divisors := []uint64{1,2,4,7,14,28};
	expected_divisors_count :=  len(expected_divisors)
	test_divisors, test_divisors_count := count_divisors(28);
	if !reflect.DeepEqual(test_divisors, expected_divisors) && test_divisors_count != expected_divisors_count {
		panic("Function count_divisors(28) doesn't work correct.")
	}

	var divisors []uint64;
	divisors_length := 0;
	triangle_number := uint64(1);
	for i:=uint64(2); true; i++ {
		divisors, divisors_length = count_divisors(triangle_number);
		if divisors_length >= 500 {
			break;
		}
		triangle_number += i;
	}

	fmt.Println("The first triangle number to have over five hundred divisors is ", triangle_number);
	for idx, divisor := range(divisors) {
		fmt.Print(divisor, ", ");
		if idx % 10 == 9 {
			fmt.Print("\n");
		}
	}
	fmt.Print("\n");
}
